generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  student   Student?
}

model Student {
  id                String             @id @default(cuid())
  studentId         String             @unique
  name              String
  birthCertNumber   String?
  icNumber          String?
  birthDate         DateTime?
  birthPlace        String?
  address           String?
  motherName        String?
  fatherName        String?
  motherIcNumber    String?
  fatherIcNumber    String?
  motherPhoneNumber String?
  fatherPhoneNumber String?
  avatarUrl         String?
  userId            String?            @unique
  classId           String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  user              User?              @relation(fields: [userId], references: [id])
  class             Class?             @relation(fields: [classId], references: [id])
  examResults       ExamResult[]
  leaveApplications LeaveApplication[]
  feePayments       FeePayment[]
}

model Class {
  id           String    @id @default(cuid())
  name         String
  academicYear String
  teacherId    String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  teacher      Teacher?  @relation(fields: [teacherId], references: [id])
  students     Student[]
}

model Teacher {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  phone     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  classes   Class[]
}

model Exam {
  id         String       @id @default(cuid())
  name       String
  subject    String
  date       DateTime
  totalMarks Int
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  results    ExamResult[]
}

model ExamResult {
  id        String   @id @default(cuid())
  studentId String
  examId    String
  marks     Int
  grade     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  student   Student  @relation(fields: [studentId], references: [id])
  exam      Exam     @relation(fields: [examId], references: [id])
}

model LeaveApplication {
  id        String   @id @default(cuid())
  studentId String
  startDate DateTime
  endDate   DateTime
  reason    String
  status    String   @default("pending") // pending, approved, rejected
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  student   Student  @relation(fields: [studentId], references: [id])
}

model FeePayment {
  id               String    @id @default(cuid())
  studentId        String
  amount           Float
  description      String
  dueDate          DateTime
  isPaid           Boolean   @default(false)
  paidAt           DateTime?
  paymentReference String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  student          Student   @relation(fields: [studentId], references: [id])
}
